#INFO: **** input file is /home/wsr/dftpart/frame_2019_6-30_700.py ****
'''
Example for path/to/pyscf/pyscf/eda

Created Oct/15/2018
'''

from pyscf import gto, scf, dft, symm, qmmm
import edanew
from pyscf.scf import _vhf
#from frame_small2 import preri
from jkeda2 import preri
#from frame_small5 import preri
from pyscf.gto import moleintor

import numpy as np
import sys
import time

starttime = time.time()
xyznam = sys.argv[1]
mol = gto.Mole()
with open(xyznam) as f:
   geom = f.read()
mol.atom = geom
#mol.cart=True
#mol.basis = 'cc-pvtz'
#mol.basis = '6-311g(d,p)'
#mol.basis = '6-31g(d,p)'
mol.basis = 'sto-3g'
mol.verbose = 4
#mol.symmetry = 1
mol.output = xyznam[0:-4] + '-pyscf.log'
mol.build()
atom_number = len(mol._atom)

atom_coord = np.zeros((atom_number,3))
for i in range(atom_number):
    atom_coord[i] = mol.atom_coord(i)
atomlist1 = np.ones(atom_number,dtype=int)

realatomlabel = list(range(atom_number))

#spinlist1 = [0,1,1]*10
#spinlist1 = [1,1]
#spinlist1 = [0,1,1,1,1]
#spinlist1 = [0,1,1,1,0,1,1,1]
#spinlist1 = [0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1]
spinlist1 = [0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1]
mf = scf.RHF(mol)
mf.kernel()
atm_ = mol._atm.T
atml = np.shape(mol._atm)[0]
bas_ = mol._bas.T 
basl = np.shape(mol._bas)[0]
env_ = mol._env
envl = np.shape(mol._env)[0]

print("mol._atm=",atm_.T,atml) 
print("mol._bas=",bas_.T,basl)
print("mol._env=",env_.T,envl)
#g = mf.nuc_grad_method()
#g.kernel()
pyscf_time = time.time()
print("pyscf_time=",pyscf_time-starttime)

dm = mf.make_rdm1()
nao = len(dm)
print("nao=",nao)
nbas = mol._bas.shape[0]
print("nbas=",nbas)
def include(a,b):
    if len(list(set(a) & set(b)))==0:
        return True
    else:
        return False

dml = []
E_nuc = []
E1 = []
slice = []
basis = []
shls = []
singleatom = []
twoatom = []
threeatom = []
fouratom = []

for i in realatomlabel:
    dm_new, e_nuc, e1, basis_range = edanew.get_dm(mf, dm, [i], atomlist1, spinlist1, 'hf')
    dml.append(dm_new)
    frag = gto.Mole()
    a = basis_range[0] + 1
    b = basis_range[-1] + 1
    slice.append([a,b])
    #singleatom.append(basis_range)
    e_nuc = frag.energy_nuc([mol.atom_charges()[i]],atom_coord[i])
    E_nuc.append(e_nuc)
    E1.append(e1)
    basis_range = [i + 1 for i in basis_range]
    singleatom.append(basis_range)

for i in realatomlabel:
    for j in realatomlabel:
        if j > i:
            dm_new, e_nuc, e1, basis_range = edanew.get_dm(mf, dm, [i,j], atomlist1, spinlist1, 'hf')
            #twoatom.append(basis_range)
            dml.append(dm_new)
            frag = gto.Mole()
            e_nuc = frag.energy_nuc([mol.atom_charges()[i],mol.atom_charges()[j]],atom_coord[[i,j]])
            E_nuc.append(e_nuc)
            E1.append(e1)
            basis_range = [i + 1 for i in basis_range]
            twoatom.append(basis_range)

for i in realatomlabel:
    for j in realatomlabel:
        for k in realatomlabel:
            if j>i and k>j:
                dm_new, e_nuc, e1, basis_range = edanew.get_dm(mf, dm,  [i,j,k], atomlist1, spinlist1, 'hf')
                #threeatom.append(basis_range)
                dml.append(dm_new)
                frag = gto.Mole()
                slice.append([a,b])
                e_nuc = frag.energy_nuc([mol.atom_charges()[i],mol.atom_charges()[j],mol.atom_charges()[k]],atom_coord[[i,j,k]])
                E_nuc.append(e_nuc)
                E1.append(e1)
                basis_range = [i + 1 for i in basis_range]
                threeatom.append(basis_range)

for i in realatomlabel:
    for j in realatomlabel:
        for k in realatomlabel:
            for l in realatomlabel:
                if j>i and k>j and l>k:
                    dm_new, e_nuc, e1, basis_range = edanew.get_dm(mf, dm, [i,j,k,l], atomlist1, spinlist1, 'hf')
                    #fouratom.append(basis_range)
                    dml.append(dm_new)
                    frag = gto.Mole()
                    a = basis_range[0] + 1 
                    b = basis_range[-1] + 1 
                    slice.append([a,b])
                    e_nuc = frag.energy_nuc([mol.atom_charges()[i],mol.atom_charges()[j],mol.atom_charges()[k],mol.atom_charges()[l]],atom_coord[[i,j,k,l]])
                    E_nuc.append(e_nuc)
                    e1 = 0.0
                    E1.append(e1)
                    basis_range = [i + 1 for i in basis_range]
                    fouratom.append(basis_range)
b = time.time()
print("combination-time=",b-pyscf_time)
e_coul = []
vhf = []

#eri_s8 = mol.intor("int2e_sph",aosym='s8')
#eri = mol.intor("int2e_sph")


#print(max(singleatom))
num = []; num2 = []; num3= []; num4=[]
for i in range(len(singleatom)):
    num.append(len(singleatom[i]))
num1 = (max(num))
for i in range(len(twoatom)):
    num2.append(len(twoatom[i]))
num2 = (max(num2))
#for i in range(len(threeatom)):
#    num3.append(len(threeatom[i]))
#num3 = (max(num3))
#for i in range(len(fouratom)):
#    num4.append(len(fouratom[i]))
#num4 = (max(num4))
#print(num1,num2,num3,num4)

for i in range(len(singleatom)):
    if len(singleatom[i])<num1:
        singleatom[i] = singleatom[i] + [0]*(num1-len(singleatom[i]))
for i in range(len(twoatom)):
    if len(twoatom[i])<num2:
        twoatom[i] = twoatom[i] + [0]*(num2-len(twoatom[i]))
#for i in range(len(threeatom)):
#    if len(threeatom[i])<num3:
#        threeatom[i] = threeatom[i] + [0]*(num3-len(threeatom[i]))
#for i in range(len(fouratom)):
#    if len(fouratom[i])<num4:
#        fouratom[i] = fouratom[i] + [0]*(num4-len(fouratom[i]))
singleitem = len(singleatom)
twoitem = len(twoatom)
#threeitem = len(threeatom)
#fouritem = len(fouratom)
#print(singleitem,twoitem,threeitem,fouritem)

#--------------------------------calc e_coul step by step
#for i in range(nbas):
#    tem = moleintor.getints('int2e_cart',mol._atm, mol._bas, mol._env,(i,i+1,0,nbas,0,nbas,0,nbas))
#    a = tem[0].reshape((1,nao,nao,nao))
#    print(np.shape(a))
#print("singleatom=",singleatom)
#print("singleitem=",singleitem)
#print("num1=",num1)
#exit(1)
# ---------------------------- restructure slice 
#e_coul = ecoul(eri,nao,dm,list(range(1,nao+1)),nao)
# ---------------------------------------------------
atom_energy = []
slice = 1
t1 =time.time()
#tem = moleintor.getints('int2e_cart',mol._atm, mol._bas, mol._env,shls_slice = None,aosym='s8')
#print("TEM=",tem)
#exit(1)
#gto.getints_by_shell('int2e_sph', (0,1,0,1), mol._atm, mol._bas, mol._env, comp=3)


########################################################################
#tem = moleintor.getints('int2e_sph',mol._atm, mol._bas, mol._env,(0,nbas,0,nbas,0,nbas,0,nbas))
#print("sad",np.shape(tem))
#for i in range(nao):
#    print("tem=",tem[i][1][2][3])
t1 = time.time()
atom_energy = preri(atm_,atml,bas_,basl,env_,envl,nao,nbas,dm,singleatom,singleitem,num1)
t2 = time.time()
print("T2-T1=",t2-t1)
print("Run total time",t2-starttime)
#print("atom_energy=",atom_energy)
#atom_energy = preri(atm_,atml,bas_,basl,env_,envl)
#exit(1)
#########################################################################
#
## ---------------------------------------------------------------------- SINGLE RUN
#t1 = time.time()
#tem = moleintor.getints('int2e_sph',mol._atm, mol._bas, mol._env,(0,1,0,nbas,0,nbas,0,nbas))
#t2 = time.time()
#a = tem[0].reshape((1,nao,nao,nao))
#atom_energy.append(preri(a,slice,nao,dm,singleatom,singleitem,num1))
#t3 = time.time()
#print("Single cycle=",t2-t1,' ',t3-t2,' ',t3-t1)
#exit(1)
## ----------------------------------------------------------------------
#for i in range(nbas):
#    tem = moleintor.getints('int2e_sph',mol._atm, mol._bas, mol._env,(i,i+1,0,nbas,0,nbas,0,nbas))
#    #print("SHAPE1=",np.shape(tem))
#    atom = np.shape(tem)[0]
#    #print("SHAPE=",atom)
#    a = tem[0].reshape((1,nao,nao,nao))
#    if (atom==1):
#        # ---------------------------- call fortran subroutine
#        #atom_energy = preri(a,nao,dm,singleatom,singleitem,num1)
#         atom_energy.append(preri(a,slice,nao,dm,singleatom,singleitem,num1))
#         slice+=1
#         #print("atom")
#        #print("Atom_energy=",atom_energy)
#        # ---------------------------- end call fortran
#    else:
#       for j in range(atom):
#            a = tem[j].reshape((1,nao,nao,nao))
#           # ---------------------------- call fortran subroutine
#           #atom_energy = preri(a,nao,dm,singleatom,singleitem,num1)
#            atom_energy.append(preri(a,slice,nao,dm,singleatom,singleitem,num1))
#            slice+=1
#           #print("Atom_energy=",atom_energy)
#           # ---------------------------- end call fortran
#       #print(tem[]
#t2 = time.time()
#print("Time=",t2-t1)
#atom_energy = np.array(atom_energy)
##print("Atom_energy=",atom_energy)
print("atom_ej=",atom_energy[0])
print("atom_ek=",atom_energy[1])
atom_energy = np.array(atom_energy[0])[0:atom_number] + np.array(atom_energy[1])[0:atom_number]
print("Atom_energy=",atom_energy)
#atom_energy = np.array(atom_energy).sum()
#print("Atom_energy=",atom_energy)
#-------------------------------------------------------
#print(len(E_coul_list),len(E1),len(E_nuc))
#Elec = np.array(E_coul_list) + np.array(E1) + np.array(E_nuc)
Elec = np.array(E1) + np.array(E_nuc)

frag = list(range(atom_number)) 
command = []
for i in frag:
    command.append((i,))

for i in frag:
    for j in frag:
        if j>i:
            command.append((i,j))

for i in frag:
    for j in frag:
        for k in frag:
            if k>j and j>i:
                command.append((i,j,k))

for i in frag:
    for j in frag:
        for k in frag:
            for l in frag:
                if l>k and k>j and j>i:
                    command.append((i,j,k,l))
energy = {}
E_coul = {}
i = 0
for item in command:
    energy[item] = Elec[i]
    #E_coul[item] = E_coul_list[i]
    i += 1

def inter_energy(energy):
    blank = []
    for item in command:
        if len(item)==1:  # single-body energy
            blank.append(energy[item])
        elif len(item)==2:  # two-body interaction
            #print(item)
            for element in item:
                #print(energy[item],energy[(item[0],)],energy[(item[1],)])
                blank.append(energy[item] - energy[(item[0],)] - energy[(item[1],)])
                break
        elif len(item)==3:  # three-body interaction 
            for element in item:
                #print(item)
                EIJK = energy[item]
                EIJ = 0.0
                for i in item:
                    for j in item:
                        if j>i:
                            Eij = energy[(i,j)]
                            #print(Eij)
                            EIJ+= Eij
                        EI = 0.0
                for i in item:
                    Ei = energy[(i,)]
                    #print(Ei)
                    EI += Ei 
                #print(Eijk - EIJ + EI)
                blank.append(EIJK - EIJ + EI)
                break
        elif len(item)==4:  # four-body interaction 
            for element in item:
                EIJKL = energy[item]
                EIJK = 0.0 
                for i in item:
                    for j in item:
                        for k in item:
                            if k>j and j>i:
                                Eijk = energy[(i,j,k)]
                                EIJK+= Eijk
                EIJ = 0.0
                for i in item:
                    for j in item:
                        if j>i:
                            Eij = energy[(i,j)]
                            EIJ+= Eij
                EI = 0.0
                for i in item:
                    Ei = energy[(i,)]
                    EI+= Ei
                blank.append(EIJKL - EIJK + EIJ -EI)
                break
    return blank
# -------------------------------------------------------------------------------------
blank = inter_energy(energy)
#blank1 = inter_energy(E_coul)

Inter_energy = {}
i = 0
for item in command:
    if len(item)!=4:
        Inter_energy[item] = blank[i]
        i+=1
    else:
        Inter_energy[item] = 0.0
        i+=1
sum = 0.0
for i in range(len(command)):
    #print(i,Inter_energy[command[i]])
    sum+= Inter_energy[command[i]]
#print(sum)
atomenergy = []
for central_number in frag:
    central_number = int(central_number)
    central_energy = 0.0
    for i in range(len(blank)):
        if len(command[i])==1 and central_number in command[i]:
            central_energy+= Inter_energy[command[i]]
            #print(command[i])
        elif len(command[i])==2 and central_number in command[i]:
            central_energy+= 1/2 * Inter_energy[command[i]]
            #print(command[i])
        elif len(command[i])==3 and central_number in command[i]:
            central_energy+= 1/3 * Inter_energy[command[i]]
            #print(command[i])
        elif len(command[i])==4 and central_number in command[i]:
            central_energy+= 1/4 * Inter_energy[command[i]]
            #print(command[i])
    atomenergy.append(central_energy)

atomenergy = np.array(atomenergy) + atom_energy
scfenergy = np.sum(atomenergy)
outfile = xyznam[0:-3] + "atom"
with open(outfile,"w") as f:
    f.write("SCF Energy=%16.6f\n" %(scfenergy))
    for i in range(len(atomenergy)):
        f.write("%i%16.6f\n" %(i+1,atomenergy[i]))
endtime = time.time()
print('timeTot=',(endtime-starttime))
#print(command)
#print(len(command))
print('Hello wolrd')

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='lw06', release='3.10.0-957.el7.x86_64', version='#1 SMP Thu Nov 8 23:39:32 UTC 2018', machine='x86_64', processor='x86_64')  Threads 48
Python 3.7.3 (default, Mar 27 2019, 22:11:17) 
[GCC 7.3.0]
numpy 1.16.2  scipy 1.2.1
Date: Tue Jul  2 15:17:23 2019
PySCF version 1.6.2
PySCF path  /home/wsr/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 38
[INPUT] num. electrons = 98
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -7.760571710000  -0.690679840000   0.714187300000 AA  -14.665355101948  -1.305195737358   1.349618398643 Bohr
[INPUT]  2 H     -7.403917290000  -1.699489840000   0.714187300000 AA  -13.991375927032  -3.211570349081   1.349618398643 Bohr
[INPUT]  3 H     -7.403898870000  -0.186281650000   1.587838800000 AA  -13.991341118277  -0.352021300532   3.000580461958 Bohr
[INPUT]  4 H     -8.830571710000  -0.690666660000   0.714187300000 AA  -16.687362055232  -1.305170830768   1.349618398643 Bohr
[INPUT]  5 C     -7.247229490000   0.035276430000  -0.543217670000 AA  -13.695278897971   0.066662791352  -1.026532622324 Bohr
[INPUT]  6 H     -7.605480420000   1.043520110000  -0.544196420000 AA  -14.372275039542   1.971967213376  -1.028382191769 Bohr
[INPUT]  7 H     -7.602304130000  -0.470250360000  -1.416867870000 AA  -14.366272721350  -0.888644390378  -2.677492228996 Bohr
[INPUT]  8 C     -5.707232040000   0.037695900000  -0.541810400000 AA  -10.785105484943   0.071234927019  -1.023873267441 Bohr
[INPUT]  9 H     -5.348982300000  -0.970547770000  -0.540454700000 AA  -10.108111592146  -1.834069476107  -1.021311365734 Bohr
[INPUT] 10 H     -5.352157510000   0.543548610000   0.331651170000 AA  -10.114111869434   1.027158008288   0.626729880192 Bohr
[INPUT] 11 C     -5.193888830000   0.763182740000  -1.799485870000 AA   -9.815027410138   1.442206361595  -3.400535459325 Bohr
[INPUT] 12 H     -5.552206560000   1.771402190000  -1.800882260000 AA  -10.492149785414   3.347464995555  -3.403174253988 Bohr
[INPUT] 13 H     -5.548895830000   0.257282680000  -2.672947470000 AA  -10.485893412441   0.486193801794  -5.051138663649 Bohr
[INPUT] 14 C     -3.653891600000   0.765704890000  -1.798019450000 AA   -6.904854412849   1.446972534340  -3.397764327141 Bohr
[INPUT] 15 H     -3.295574730000  -0.242514850000  -1.796613100000 AA   -6.227733662737  -0.458286647640  -3.395106710806 Bohr
[INPUT] 16 H     -3.298884380000   1.271613210000  -0.924562730000 AA   -6.233987994806   2.403000703279  -1.747170344680 Bohr
[INPUT] 17 C     -3.140548370000   1.491179950000  -3.055701710000 AA   -5.934776300249   2.817921707943  -5.774439350265 Bohr
[INPUT] 18 H     -3.498867520000   2.499398880000  -3.057108420000 AA   -6.611901358936   4.723179359245  -5.777097646902 Bohr
[INPUT] 19 H     -3.495553930000   0.985270700000  -3.929158570000 AA   -6.605639581347   1.861891781559  -7.425033597288 Bohr
[INPUT] 20 C     -1.600551140000   1.493704280000  -3.054234050000 AA   -3.024603302960   2.822692000291  -5.771665874821 Bohr
[INPUT] 21 H     -1.242232840000   0.485485050000  -3.052828560000 AA   -2.347479850541   0.917433782071  -5.769009883650 Bohr
[INPUT] 22 H     -1.245545350000   1.999612100000  -2.180776450000 AA   -2.353739587226   3.778719224366  -4.121070229401 Bohr
[INPUT] 23 C     -1.087207910000   2.219181520000  -4.311915050000 AA   -2.054525190361   4.193645293496  -8.148338516890 Bohr
[INPUT] 24 H     -1.445525630000   3.227400960000  -4.313319140000 AA   -2.731647546739   6.098903908558  -8.150991862445 Bohr
[INPUT] 25 H     -1.442214910000   1.713274800000  -5.185372790000 AA   -2.725391192664   3.237620148119  -9.798934426872 Bohr
[INPUT] 26 C      0.452789330000   2.221703650000  -4.310448640000 AA    0.855647825825   4.198411428447  -8.145567403604 Bohr
[INPUT] 27 H      0.811106190000   1.213483910000  -4.309045810000 AA    1.532768557039   2.293152246466  -8.142916439105 Bohr
[INPUT] 28 H      0.807796550000   2.727608920000  -3.436990150000 AA    1.526514243869   5.154433833721  -6.494970076328 Bohr
[INPUT] 29 C      0.966132550000   2.947183100000  -5.568128370000 AA    1.825725919528   5.569368897947 -10.522237645721 Bohr
[INPUT] 30 H      0.607816270000   3.955403060000  -5.569529800000 AA    1.148606284355   7.474628495667 -10.524885964604 Bohr
[INPUT] 31 H      0.611124120000   2.441278930000  -6.441587000000 AA    1.154857214916   4.613348571371 -12.172835237559 Bohr
[INPUT] 32 C      2.506129790000   2.949703030000  -5.566663230000 AA    4.735898935714   5.574130875500 -10.519468932387 Bohr
[INPUT] 33 H      2.864445220000   1.941482770000  -5.565263040000 AA    5.413016964620   3.668870710862 -10.516822956764 Bohr
[INPUT] 34 H      2.861138460000   3.455605760000  -4.693203850000 AA    5.406768093860   6.530148480870  -8.868869923254 Bohr
[INPUT] 35 C      3.019473010000   3.675184680000  -6.824341690000 AA    5.705977029416   6.945092502397 -12.896136774551 Bohr
[INPUT] 36 H      2.661158170000   4.683405150000  -6.825740480000 AA    5.028860115449   8.850353063878 -12.898780104557 Bohr
[INPUT] 37 H      4.089471100000   3.676934010000  -6.823324570000 AA    7.727980373324   6.948398256999 -12.894214696316 Bohr
[INPUT] 38 H      2.664463140000   3.169283040000  -7.697801200000 AA    5.035105603599   5.989076956829 -14.546736029348 Bohr

nuclear repulsion = 678.876069185797
number of shells = 62
number of NR pGTOs = 258
number of NR cGTOs = 86
basis = sto-3g
ecp = {}
CPU time:         0.47


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /home/wsr/dftpart/tmplkka4zrz
max_memory 4000 MB (current use 57 MB)
Set gradient conv threshold to 3.16228e-05
init E= -467.772108370728
  HOMO = -0.303519456077386  LUMO = 0.348475638652532
cycle= 1 E= -464.041688559348  delta_E= 3.73  |g|= 0.357  |ddm|= 6.64
  HOMO = -0.318325971904148  LUMO = 0.58682145171638
cycle= 2 E= -464.091288575276  delta_E= -0.0496  |g|= 0.0769  |ddm|= 0.642
  HOMO = -0.352418510054866  LUMO = 0.566068874401655
cycle= 3 E= -464.093958145104  delta_E= -0.00267  |g|= 0.013  |ddm|= 0.156
  HOMO = -0.346815515213694  LUMO = 0.572250410800724
cycle= 4 E= -464.094021354148  delta_E= -6.32e-05  |g|= 0.00085  |ddm|= 0.0257
  HOMO = -0.346870496114096  LUMO = 0.572142239536215
cycle= 5 E= -464.094021713537  delta_E= -3.59e-07  |g|= 0.000164  |ddm|= 0.0016
  HOMO = -0.346911912368455  LUMO = 0.5721123461562
cycle= 6 E= -464.094021727782  delta_E= -1.42e-08  |g|= 4.97e-05  |ddm|= 0.000306
  HOMO = -0.346916862560944  LUMO = 0.572109980735744
cycle= 7 E= -464.094021729304  delta_E= -1.52e-09  |g|= 7.93e-06  |ddm|= 0.000119
  HOMO = -0.346917460773491  LUMO = 0.572109279168914
cycle= 8 E= -464.09402172934  delta_E= -3.55e-11  |g|= 1.03e-06  |ddm|= 1.98e-05
  HOMO = -0.346917593538892  LUMO = 0.572109124877824
Extra cycle  E= -464.094021729334  delta_E= 5.68e-12  |g|= 3.21e-07  |ddm|= 1.71e-06
converged SCF energy = -464.094021729334
